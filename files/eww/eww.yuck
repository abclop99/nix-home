; Define some variables used in this config

(defwindow bar
	:monitor 0
	:geometry (geometry
		:x "0%"
		:y "9px"
		:width "98%"
		:height "30px"
		:anchor "top center"
	)
	:stacking "fg"
	:reserve (struts :distance "40px" :side "top")
	:windowtype "dock"
	:wm-ignore false
	:exclusive true
	:focusable false

	(bar)
)

; Overall widget
(defwidget bar []
	(centerbox  :orientation "horizontal"
							:halign "fill"
		(left)
		(center)
		(right)
	)
)

; Left, center, right sections
(defwidget left []
	(box  :orientation "h"
				:space-evenly false
				:halign "start"
				:class "section left"

		(workspaces)
	)
)

(defwidget center []
	(box  :orientation "h"
				:space-evenly false
				:halign "center"
				:class "section center ${active_window_title == "" ? "empty" : "occupied" }"

		(active_window)
	)
)

(defwidget right []
	(box  :orientation "h"
				:space-evenly false
				:halign "end"
				:class "section right"

		"Systray"
		(sep)
		"Volume, etc."
		(sep)
		"System info"
		(sep)
		(clock)
	)
)

; Workspace module: Left
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
	(eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}"
		(box  :space-evenly true
			; (label :text "${workspaces}${current_workspace}" :visible false)
			(for workspace in workspaces
				(eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
									:class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
					(label :text "${workspace.id}")
				)
			)
		)
	)
)

; Window title module: Ceter
(deflisten active_window_title :initial "..." "sh ~/.config/eww/scripts/get-window-title")
(defwidget active_window []
	
	(box  :class "window_title"
		(label :text "${active_window_title}")
	)
)

; Right side stuff
(defwidget sep []
	(box  :class "separator"
		(label :text "|")
	)
)

(defvar time_rev false)
; Percent of the day passed. It's complicated enough that I don't want to
; write it multiple times.
(defpoll day_percent :initial 0 :interval "10m" "echo $(( ($(date '+%-H') * 60 + $(date '+%-M')) * 100 / 1440 ))")
(defwidget clock []
	(eventbox 
			:onhover "${EWW_CMD} update time_rev=true"
			:onhoverlost "${EWW_CMD} update time_rev=false"
			:class "module"

		(box  :space-evenly "false"
					:class "clock"
			(revealer :transition "slideleft"
								:reveal time_rev
								:duration "200ms"

				(box :class "date" {formattime(EWW_TIME, "%F")})
			)
			(box :class "time" {formattime(EWW_TIME, "%T")})
			(circular-progress :class "percent"
				:value day_percent
				:start-at 25
				:thickness 2
				:clockwise true
				:tooltip `${day_percent}% of the day
${round(100 * formattime(EWW_TIME, "%-M") / 60, 0)}% of the hour`

				(circular-progress :class "hour-percent"
					:value {100 * formattime(EWW_TIME, "%-M") / 60}
					:start-at 25
					:thickness 3
					:clockwise true
				)
			)
		)
	)
)
